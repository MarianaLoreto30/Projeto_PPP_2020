-------------------------------------------------ENUNCIADO PORTUGUÊS-------------------------------------------------

(English bellow)

O enunciado fornecido não é necessariamente completo. O comportamento do programa nas situações não previstas no enunciado deve ser escolhido por cada estudante, de entre as várias hipóteses razoáveis. 
As escolhas feitas devem ser referidas explicitamente: não é aceitável ter de ir ver qual o comportamento do programa nesses casos para saber qual a escolha feita. No cabeçalho do programa principal devem estar listadas as escolhas feitas.
As situações de erro devem ser intercetadas e recuperadas ou, pelo menos, assinaladas, se a recuperação não for viável ou for complexa.
Os dados de entrada devem fazer sentido, conter pelo menos 100 entidades, e os ficheiros que os contenham devem ser incluídos na submissão final do trabalho.
O interface com a estrutura de dados usada deve estar bem definido.

A implementação da estrutura de dados deve ser feita num ficheiro fonte autónomo, sendo os dados que a suportam declarados como variáveis static nesse ficheiro, para não poderem ser usadas no programa principal.

Os dados de entrada devem ser lidos de um ficheiro de texto, com uma entidade por linha, e os diversos atributos de uma entidade separados pelo carater '\t'.

O nome do ficheiro de entrada deve ser obtido da linha de comando. 

O programa deve fazer a programação das consultas num hospital para um determinado dia. 
Há dois grupos de dados de entrada: uma lista de médicos, indicando a respetiva especialidade, 
e uma lista de doentes, indicando a especialidade em que precisam de ser consultados e o seu grau de urgência numa escala de 1 (menos urgente) a 4 (mais urgente). 
Cada médico vê 10 doentes, de meia em meia hora, entre as 10 e as 15 horas. 

O programa deve gerar duas listagens: uma lista de doentes e as suas marcações, e uma lista de médicos e a respetivas marcações.

O programa deve usar (uma ou mais) listas ligadas simples baseadas em gestão dinâmica de memória.

O nome do ficheiro de saída deve ser lido de um ficheiro de texto chamado "config.txt".
Os dados de saída devem ser escritos num ficheiro de texto, com uma entidade por linha, e os diversos atributos da entidade separados pelo carater '\t'.


--------------------------------------------------------ENGLISH--------------------------------------------------------

The statement provided is not necessarily complete. The behavior of the program in situations not provided for in the statement must be chosen by each student, among the various reasonable assumptions.
The choices made must be mentioned explicitly: it is not acceptable to have to go and see what the program behaves in these cases to find out which choice was made. The choices made must be listed in the main program header.
Error situations must be intercepted and recovered, or at least flagged, if recovery is not feasible or complex.
The input data must make sense, contain at least 100 entities, and the files containing them must be included in the final submission of the work.
The interface with the data structure used must be well defined.

The implementation of the data structure must be done in an autonomous source file, the data supporting it being declared as static variables in that file, so that it cannot be used in the main program.

The input data must be read from a text file, with one entity per line, and the various attributes of an entity separated by the character '\ t'.

The name of the input file must be obtained from the command line.

The program should schedule appointments at a hospital for a given day.
There are two groups of input data: a list of doctors, indicating their specialty,
and a list of patients, indicating the specialty in which they need to be consulted and their degree of urgency on a scale of 1 (least urgent) to 4 (most urgent).
Each doctor sees 10 patients every half hour between 10 and 15 hours.

The program should generate two listings: a list of patients and their appointments, and a list of doctors and their appointments.

The program must use (one or more) simple linked lists based on dynamic memory management.

The name of the output file must be read from a text file called "config.txt".
The output data must be written in a text file, with one entity per line, and the various attributes of the entity separated by the character '\ t'.
